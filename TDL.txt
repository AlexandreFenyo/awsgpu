
TDL :

processer la recherche par headings, puis la merger

compresser un document

modifier les requêtes et merger les résultats des recherches avec les différentes versions des requêtes

découper une requête en plusieurs sous requêtes s'il y a des relations X->Y et Y->Z, en repérant ces relations par un prompt et un modèle adaptés

faire de la recherche BM25 et fuzzy

reranker

corriger les fautes d'orthographe automatiquement

modifier la requête pour qu'elle affiche précisément l'intention de l'utilisateur

OCR

modifier les références de texte quand les objets référencés ont changé de forme dans le MarkDown

identifier les references et les mettre dans les metadata, le reranking permettra de les utiliser si elles sont utiles

------------------------------------------------------------

processer la recherche par headings, puis la merger :

(awsgpu-py3.13) fenyo@ordinatlexandre awsgpu % ./scripts/request.sh -n "RGPD" > /tmp/res

collecting chunks for text content: /tmp/chunks-CydZ9WTBdg.jsonl
collecting chunks for headings: /tmp/chunks-CydZ9WTBdg.headings.jsonl
updating chunks (adding titles): /tmp/chunks-CydZ9WTBdg.jsonl.embeddings.ndjson



(awsgpu-py3.13) fenyo@ordinatlexandre awsgpu % cat /tmp/chunks-CydZ9WTBdg.jsonl | jq -r '.chunk_id' | sort -u > /tmp/res1
(awsgpu-py3.13) fenyo@ordinatlexandre awsgpu % cat /tmp/chunks-CydZ9WTBdg.headings.jsonl | jq -r '.chunk_id' | sed 's/md-headings-//' | sed 's/docx\./docx-/' | sort -u > /tmp/res2

pb : presque rien en commun !
chercher sur les titres ne sert pratiquement à rien, car le contenu des titres a peu d'infos, seuls un ou deux titres vont matcher, et on les retrouve déjà dans les chunks (les contenu du chunk, indépendamment des modifs qu'on fait par la suite, reprend le titre, si le rédacteur a correctement rédigé cela). Ce qui est intéressant, c'est de les avoir mis en début de chunk. Les titres servent en fait au bon découpage en chunks !

